*Reverse a String:
function reverseString(str) {
  return str.split("").reverse().join("");
}

*Factorialize a Number:
function factorialize(num) {
  if(num === 0){return 1;}
  var arr = [];
  for(var i = 0; i < num; i++){
	arr.push(i+1);
  }
  num = arr.reduce(function(preVal, currVal){return preVal * currVal;});
  
  //...
  return num;
}

*Check for Palindromes:
function palindrome(str) {
  return str.replace(/[^a-z0-9+]+/gi, "").toLowerCase() === str.replace(/[^a-z0-9+]+/gi, "").toLowerCase().split("").reverse().join("");
}

*Find the Longest Word in a String:
function findLongestWord(str) {
  var arr = [];
  arr = str.split(" ");
  var l_word = arr[0];
  for(var i = 1; i < arr.length; i++){
    if(l_word.length < arr[i].length){l_word = arr[i];}
  }
  //...
  return l_word.length;
}

*Title Case a Sentence:
function titleCase(str) {
  var arr = [];
  arr = str.split(" ");
  str = "";
  for(var i = 0; i < arr.length; i++){
    for(var j = 0; j < arr[i].length; j++){
      if(j === 0){str = str.concat(arr[i][j].toUpperCase());}
      else{str = str.concat(arr[i][j].toLowerCase());}
    }
    
    if(i < arr.length - 1){str += " ";}
  }

  return str;
}

*Return Largest Numbers in Arrays:
function largestOfFour(arr) {
  var l_arr = [];
  for(var i = 0; i < arr.length; i++){
    var l_n = arr[i][0];
    for(var j = 1; j < arr[i].length; j++){
      if(l_n < arr[i][j]){l_n = arr[i][j];}
    }
    l_arr.push(l_n);
  }
  return l_arr;
}

*Confirm the Ending:
function confirmEnding(str, target) {
  return str.substring(str.length-target.length, str.length) === target;
}

*Repeat a string repeat a string:
function repeatStringNumTimes(str, num) {
  if(num > 0){
    return str.repeat(num);
  }
  else{
    return "";
  }
}

*Truncate a string:
function truncateString(str, num) {
  var len = 0;
  var newStr = "";
  
  if(num <= 3){len = num;}
  else if(num < str.length){len = num - 3;}
  else if(str.length <= num){len = str.length;}
  
  for(var i = 0; i < len; i++){
    newStr += str[i];
  }
  
  if(num < str.length){newStr += "...";}
  
  return newStr;
}

*Chunky Monkey:
function chunkArrayInGroups(arr, size) {
  var newArr = [];
  for(var i = 0; i < arr.length/size; i++){
    newArr[i] = [];
    for(var j = 0; j < size; j++){
      if(arr[i*size+j] !== undefined){newArr[i][j] = arr[i*size+j];}
    }
  }
  return newArr;
}

*Mutations:
function mutation(arr) {
  var st_1 = arr[0].toLowerCase();
  var st_2 = arr[1].toLowerCase();
  var wtf = "";

  for(var i = 0; i < st_2.length; i++){
    for(var j = 0; j < st_1.length; j++){
      if(st_1[j] === st_2[i]){  
        wtf += st_2[i];
        break;
      }
    }
  }
  
  if(wtf === st_2){return true;}else{return false;}
}

*Falsy Bouncer:
function bouncer(arr) {
  return arr.filter(Boolean);
}

*Slasher Flick:
function slasher(arr, howMany) {
  for (var i = 0; i < howMany; i++){arr.shift();}
  return arr;
}

*Seek and Destroy:
function destroyer(arr) {
  var destArr = []; 

  for(var x = 0; x < arguments.length; x++){
    if(arguments[x+1] !== undefined){destArr[x] = arguments[x+1];}
  }
  
  return arr.filter(function(e){return this.indexOf(e)<0;},destArr);
}

*Where do I belong:
function getIndexToIns(arr, num) {
  arr.sort(function(a, b) {return a - b;});
  for(var i = 0; i < arr.length; i++){
    if(arr[i] >= num){return i;}
  }
  return arr.length;
}

*Caesars Cipher:
function rot13(str) { // LBH QVQ VG!
  var r_str = "";
  str = str.toUpperCase();
  for(var i =0 ; i < str.length; i++){
    if(str[i].match(/[A-Z]/i)){
      var c = str[i].charCodeAt() - 13;
      if(c < 65){c = 26 + c;} // 26 alphabetic characters.
      
      r_str += String.fromCharCode(c);
    }
    else{
      r_str += str[i];
    }
  }
  
  return r_str;
}

*Sum All Numbers in a Range:
function sumAll(arr) {
  var sum = 0;
  for(var i = Math.min(arr[0],arr[1]); i <= Math.max(arr[0],arr[1]); i++){
    sum += i;
  }
  return sum;
}

*Diff Two Arrays:
function diffArray(arr1, arr2) {
  var newArr = [], _arr = arr1.concat(arr2);
  
  for(var i = 0; i < _arr.length; i++){
    if(arr1.indexOf(_arr[i]) == -1 && 0 <= arr2.indexOf(_arr[i]) || 0 <= arr1.indexOf(_arr[i]) && arr2.indexOf(_arr[i]) == -1){
      newArr.push(_arr[i]);
    }
  }
  return newArr;
}

*Missing letters:
function fearNotLetter(str) {
  var _c =  str[0].charCodeAt();
  for(var i = 0; i < str.length; i++){
	if(str[i].charCodeAt() !== _c){return String.fromCharCode(_c);}
    _c++;
  }
}

*Search and Replace:
function myReplace(str, before, after) {
  return str.replace(new RegExp(before, 'g'), ((before[0] === before[0].toLowerCase())? after[0].toLowerCase() + after.slice(1): after[0].toUpperCase() + after.slice(1)));
}

*Spinal Tap Case:
function spinalCase(str) {
  return str.replace(/_/g, " ").replace(/[a-z][A-Z]/g, function(){
    return arguments[0][0] + " " + arguments[0][1];
  }).replace(/\s/g, "-").toLowerCase();
}

*Roman Numeral Converter:
var _base = {0: ["I","V"],1: ["X","L"],2: ["C","D"],3: ["M"]};
	function convertToRoman(num){
		function test(_i,idx){
			if(3 <= idx){return _base[idx][0].repeat(_i);}
			var _f = _base[idx][0];
			var _s = _base[idx][1];
			var _final = "";
			var _idx = _i - 5;
			switch (_idx){
				case -4:
					_final = _f.repeat(1);
					break;
				case -3:
					_final = _f.repeat(2);
					break;
				case -2:
					_final = _f.repeat(3);
					break;
				case -1:
					_final = _f.repeat(1) + _s;
					break;
				case 0:
					_final = _s;
					break;
				case 1:
					_final = _s + _f.repeat(1);
					break;
				case 2:
					_final = _s + _f.repeat(2);
					break;
				case 3:
					_final = _s + _f.repeat(3);
					break;
				case 4:
					_final = _f.repeat(1) + _base[idx + 1][0];
					break;
			}
			return _final;
		}
		var _ret = [];
		var _str = num.toString();
		var size = _str.length;
		for(var _int in _str){
			var _count = size - Number(_int) - 1;
			if(_str[_count] === 0){continue;}
			_ret.push(test(_str[_count], Number(_int)));
		}
		
		return _ret.reverse().join().replace(/,/g, "");
	}
	
*Convert HTML Entities
function convertHTML(str) {
  return str.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;");
}

*Pig Latin:
function translatePigLatin(str) {
  var _str = "";
  
  if(str.match(/^[aeiouy]/)){_str = str + "way";}
  else{
    str.replace(/[aeiouy](?![aeiouy])/,function(){
      _str = str.slice(str.indexOf(arguments[0])) + str.slice(0, str.indexOf(arguments[0])) + "ay";
    });
  }
  return _str;
}

*Wherefore art thou:
function whatIsInAName(collection, source) {
  // What's in a name?
  var arr = [];
  // Only change code below this line
  collection.forEach(function(a){ if(Object.keys(source).every(function(b){return a[b] === source[b];})) arr.push(a); });
  // Only change code above this line
  return arr;
}

*DNA Pairing:
function pairElement(str) {
  var _ret = [], _db = {"A": ["A","T"], "T": ["T","A"], "C": ["C","G"], "G": ["G","C"]};
  str.replace(/[ATCG]/g, function(z){_ret.push(_db[z]);});
  return _ret;
}

*Everything Be True:
function truthCheck(collection, pre) {
  // Is everyone being true?
  return collection.every(function(_obj){ return Boolean(_obj[pre]); });
}

*Boo who:
function booWho(bool) {
  // What is the new fad diet for ghost developers? The Boolean.
  return typeof(bool) === "boolean";
}

*Sorted Union:
// Concat all arguments and filter them.
function uniteUnique() {
  var _args = arguments, _ret = [];
  Object.keys(arguments).forEach(function(_key){_ret = _ret.concat(_args[_key]);});
  return _ret.filter(function(_c,_p){ return _ret.slice(0,_p).indexOf(_c) === -1; });
}

*Sum All Odd Fibonacci Numbers:
function sumFibs(num) {
  var _ret = 0, x = 0, y = 0, z = 1;
  while( z <= num){
    _ret += ((z % 2 === 1)? z : 0);
    //...
    x = y;
    y = z;
    z = y + x;
  }
  
  return _ret;
}

*
